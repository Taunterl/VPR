import java.util.ArrayList;

public class RandomGroups 
{
	// Deklaration der Variablen
	private static ArrayList<Group> allGroups;
	private static ArrayList<Group> studentClasses;	
	
	// Set-Methode für die privaten Methoden
	public static void setAllStudents(String[] classes)
	{
		studentClasses.add(new Group());
		studentClasses.get(0).getMembers.add();
	}
	
	// Zufällige Studenten aus einer Studierenden Klasse
	public static Person getStudentByClass(Group studentClass) 
	{
		Random rnd = new Random();
		int rndStudent = rnd.nextInt(studentClass.members.size());
		
		Person p = studentClass.members.get(rndStudent)
		
		return p;
	}
	
	// Erstellen einer zufälligen Gruppe aus allen Klassen
	// HAUPTMETHODE FÜR AUFRUF
		// Benutzung:
			// mode:		STRING  für Auswahl von Erstellung nach Größe ("size"), oder Anzahl("count") der Gruppen
			//				ANDERE WERTE WERFEN EXCEPTION!
			// modifier:	Gibt je nach "mode" die Größe der zu generierenden Gruppen oder deren Anzahl an
	public static void createRandomGroups(String mode, int modifier , String[] classes) 
	{
		/*
		 * referenz der studentClasses benutzen
		 * setAllStudents()
		 * SQL abfragen nach klassen -> personen in klassen schreiben
		 */
		if(mode.equals("count") && modifier > 0)
		{
			for(int i = 0 ; i < modifier ; i++)
				this.allGroups.add(new Group());
			
			Group currentGroup = this.allGroups.get(0); // random missing.. reduce nextInt each roll
			for (int j = 0 ; j < StudenClasses.size ; j++)
				for (int k = 0 ; k < StudenClasses.get(j).getMembers.size() ; k++)
					currentGroup.add(StudentClasses.get(j).getMembers.remove(StudentClasses.get(j).getMembers.get(k)));
					//switchCurrentGroup to next one in line (cycle groups)
			
		}
		else if(mode.equals("size") && modifier > 0)
		{
			/*this.allGroups.add(new Group())
			for*/
		}
		  
		//this.allGroups.add(*);
		saveGroupsToDatabase();
	}
	
	// Insert-Befehl für die Gruppen in die Datenbank
	public static void saveGroupsToDatabase()
	{
		String output = "";
		
		output += "INSERT INTO StudentenGruppen (GruppenID, StudentenID)";
		for(int i = 0 ; i < this.allGroups.size() ; i++)
		{
			output += "Values(";
			for(int j = 0 ; j < this.allGroups.get(i).getIdCounter() ; j++)
			{
				output += ((Person) allGroups.get(i).getMembers().get(j)).getStudentClass() + ",";
				output += ((Person) allGroups.get(i).getMembers().get(j)).getStudentID();
			}
			output += ")";
		}
		
		/*
		 * gruppen tabelle befüllen
		 * 
		 * execute von conny aufrufen
		 * 
		 * 
		 */

		
		
	}
}
